{"version":3,"sources":["components/Card/Card.js","components/Header/Header.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","clickHandler","id","image","name","react_default","a","createElement","className","src","alt","onClick","Header","Navbar","message","score","topScore","href","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSaveClick","tilez","state","tiles","tileClicked","filter","tile","clicked","handleIncorrectClick","handleCorrectClick","randomizeItems","setState","items","sort","b","Math","random","isGuessCorrect","maxScore","messageClass","resetGame","i","length","_this2","_this$state","Navbar_Navbar","Header_Header","map","Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2dffea2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Card({ clickHandler, id, image, name }) {\r\n  return (\r\n    <div className=\"card-holder\">\r\n      <img\r\n        src={image}\r\n        alt={name}\r\n        className=\"card-select grow img-thumbnail m-2 pointer\"\r\n        onClick={() => clickHandler(id)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"align-items-center bg-header jumbotron header-hgt header-pad head-mar-top nav-shadow text-center yx-auto text-center\">\r\n      <h1 className=\"header-font\">\r\n      Click any image to earn a point. <br></br> \r\n      Don't click the same image twice!\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","    \r\nimport React from \"react\";\r\n\r\nfunction Navbar({ message, score, topScore }) {\r\n  return (\r\n    <nav className=\"bg-nav fixed-top navbar nav-height nav-shadow p-0 text\">\r\n      <ul className=\"row center list-inline m-0 nav-fill nav-height nav-width\">\r\n        <li className=\"col list-inline-item my-auto nav-calc-font p-0 m-0 text-center\">\r\n          <a className=\"flicker-1 grow nav-calc-font navbar-brand p-0 m-0 title-line-hgt\"\r\n            href=\"https://peterjast.github.io/FSDportfolio/\">\r\n            FullStakesDesign \r\n            <br />\r\n            F S D\r\n          </a>\r\n        </li>\r\n        <li\r\n          className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 text-center\"\r\n        >\r\n          {message}\r\n        </li>\r\n        <li className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 score-li-width text-center\">\r\n          Score: {score}  High Score: {topScore}\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport tiles from \"./tiles.json\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isGuessCorrect: true,\n      tiles: tiles,\n      score: 0,\n      maxScore: 12,\n      topScore: 0,\n      message: \"Click an image to begin!\"\n    };\n  }\n\n  handleSaveClick = id => {\n\n    const tilez = this.state.tiles;\n   \n    const tileClicked = tilez.filter(tile => tile.id === id);\n   \n    if (!tileClicked[0].clicked) {\n      tileClicked[0].clicked = true;\n      this.handleCorrectClick();\n      this.randomizeItems(tilez);\n      this.setState({ tilez });\n    } else {\n      this.handleIncorrectClick();\n    }\n  };\n\n  randomizeItems = items => {\n    items.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  handleCorrectClick = () => {\n    this.setState({ isGuessCorrect: true });\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"CONGRATS! YOU WIN!\",\n        messageClass: \"correct\"\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"You guessed correctly!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  handleIncorrectClick = () => {\n    this.setState({\n      message: \"Wrong choice... Play again?\",\n      isGuessCorrect: false\n    });\n    this.resetGame();\n  };\n\n  resetGame = id => {\n    const tilez = this.state.tiles;\n    for (let i = 0; i < tilez.length; i++) {\n      tilez[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  render() {\n    const { message, score, tiles, topScore } = this.state;\n    return (\n      <div className=\"fluid-container lodge h-100vh\">\n        <Navbar\n          className=\"row\"\n          score={score}\n          topScore={topScore}\n          message={message}\n        />\n        <Header className=\"bg-header row\" />\n\n        <div className=\"d-flex justify-content-center main-content mx-auto padding-main flex-wrap row\">\n          {tiles.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}